public class Solution {
    /**
     * @param targetMap:
     * @return: nothing
     */
    class Node {
        int row, col;
        public Node(int r, int c) {
            row = r;
            col = c;
        }
    }

    public boolean isSafe(int r, int c, int rows, int cols) {
        if (r >= 0 && r < rows && c >= 0 && c < cols) {
            return true;
        }
        return false;
    }

    public int shortestPath(int[][] targetMap) {
        int rows = targetMap.length;
        int cols = targetMap[0].length;

        int allowed = 0, blocked = 1, dest = 2;
        int startRow = 0, startCol = 0;

        boolean[][] visited = new boolean[rows][cols];
        Queue<Node> queue = new LinkedList<>();
        queue.add(new Node(startRow, startCol));
        visited[startRow][startCol] = true;

        int[] dir = new int[]{-1, 0, 1, 0, -1};
        int result = 0;
        while (queue.size() > 0) {
            int curLevelSize = queue.size();

            for (int i = 0;i < curLevelSize;i++) {
                Node curr = queue.remove();
                if (targetMap[curr.row][curr.col] == dest) {
                    return result;
                }
                for (int j = 0;j < 4;j++) {
                    int r = curr.row + dir[j];
                    int c = curr.col + dir[j+1];
                    if (isSafe(r, c, rows, cols) && targetMap[r][c] != blocked && !visited[r][c]) {
                        queue.add(new Node(r, c));
                        visited[r][c] = true;
                    }
                }
            }
            result++;

        }

        return -1;
    }
}