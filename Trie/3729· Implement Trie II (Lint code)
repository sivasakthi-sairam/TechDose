public class Trie {

    class Node {
        char val;
        int count;
        int endsHere;
        Node[] child;

        public Node () {
            child = new Node[26];
        }
    }

    Node root;

    public Trie() {
        root = new Node();
    }

    /**
     * @param word: The string to be inserted into the Trie.
     * @return: nothing
     */
    public void insert(String word) {
        Node curr = root;
        int in;
        for (int i = 0;i < word.length();i++) {
            in = word.charAt(i) - 'a';
            if (curr.child[in] == null) {
                curr.child[in] = new Node();
            }
            curr.child[in].count++;
            curr = curr.child[in];
        }
        curr.endsHere += 1;
    }

    /**
     * @param word: The word to be searched for.
     * @return: The number of words in the Trie that are equal to the given word.
     */
    public int countWordsEqualTo(String word) {
        Node curr = root;
        int in;
        for (int i = 0;i < word.length();i++) {
            in = word.charAt(i) - 'a';
            if (curr.child[in] == null) {
                return 0;
            }
            curr = curr.child[in];
        }
        return curr.endsHere;
    }

    /**
     * @param prefix: The prefix to be searched for.
     * @return: The words in the Trie that have the same prefix as the given word.
     */
    public int countWordsStartingWith(String prefix) {
        Node curr = root;
        int in;
        for (int i = 0;i < prefix.length();i++) {
            in = prefix.charAt(i) - 'a';
            if (curr.child[in] == null) {
                return 0;
            }
            curr = curr.child[in];
        }
        return curr.count;
    }

    /**
     * @param word: The word to be removed.
     * @return: nothing
     */
    public void erase(String word) {
        Node curr = root;
        int in;
        for (int i = 0;i < word.length();i++) {
            in = word.charAt(i) - 'a';
            curr.child[in].count--;
            curr = curr.child[in];
        }
        curr.endsHere--;
    }
}