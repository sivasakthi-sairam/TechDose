import java.util.*;
public class MyClass {
    int[] st;

    public void constructSegmentTree(int n, int[] arr) {
        int x = (int) Math.ceil(Math.log(n) / Math.log(2));
        int maxSize = 2 * (int) Math.pow(2, x) - 1;
        st = new int[maxSize];
        constructUtil(0, n-1, arr, 0);
    }

    public int constructUtil(int ss, int se, int[] arr, int si) {
        if (ss == se) {
            st[si] = arr[ss];
            return arr[ss];
        }
        int mid = (ss + se) / 2;
        st[si] = (constructUtil(ss, mid, arr, 2 * si + 1) ^ constructUtil(mid + 1, se, arr, 2 * si + 2));
        return st[si];
    }

    public int getXor(int ss, int se, int qs, int qe, int si) {
        if (qs <= ss && qe >= se) {
            return st[si];
        }
        if (qe < ss || qs > se) {
            return 0;
        }
        int mid = (ss + se) / 2;
        return (getXor(ss, mid, qs, qe, 2 * si + 1) ^ getXor(mid + 1, se, qs, qe, 2 * si + 2));
    }

    public static void main(String args[]) {
      Scanner sc = new Scanner(System.in);
      int n = sc.nextInt();
      int q = sc.nextInt();
      int[] arr = new int[n];
      for (int i = 0;i < n;i++) {
          arr[i] = sc.nextInt();
      }
      MyClass myClass = new MyClass();
      myClass.constructSegmentTree(n, arr);
      for (int i = 0;i < q;i++) {
          int qs = sc.nextInt();
          int qe = sc.nextInt();
          System.out.println(myClass.getXor(0, n-1, qs - 1, qe - 1, 0));
      }
    }
}